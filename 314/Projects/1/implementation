\documentclass[11pt,a4paper]{report}
\usepackage{color}
\usepackage{ifthen}
\usepackage{makeidx}
\usepackage{ifpdf}
\usepackage[headings]{fullpage}
\usepackage{listings}
\lstset{language=Java,breaklines=true}
\ifpdf \usepackage[pdftex, pdfpagemode={UseOutlines},bookmarks,colorlinks,linkcolor={blue},plainpages=false,pdfpagelabels,citecolor={red},breaklinks=true]{hyperref}
  \usepackage[pdftex]{graphicx}
  \pdfcompresslevel=9
  \DeclareGraphicsRule{*}{mps}{*}{}
\else
  \usepackage[dvips]{graphicx}
\fi

\newcommand{\entityintro}[3]{%
  \hbox to \hsize{%
    \vbox{%
      \hbox to .2in{}%
    }%
    {\bf  #1}%
    \dotfill\pageref{#2}%
  }
  \makebox[\hsize]{%
    \parbox{.4in}{}%
    \parbox[l]{5in}{%
      \vspace{1mm}%
      #3%
      \vspace{1mm}%
    }%
  }%
}
\newcommand{\refdefined}[1]{
\expandafter\ifx\csname r@#1\endcsname\relax
\relax\else
{$($in \ref{#1}, page \pageref{#1}$)$}\fi}
\date{\today}
\title{Bao Documentation\bigskip\\ \Large Implementation and Program Structure}
\author{Regan Koopmans, 15043143}
\chardef\textbackslash=`\\
\makeindex
\begin{document}
\maketitle
\sloppy
\addtocontents{toc}{\protect\markboth{Contents}{Contents}}
\tableofcontents
\chapter{Package bao}{
\label{bao}\hskip -.05in
\hbox to \hsize{\textit{ Package Contents\hfil Page}}
\vskip .13in
\hbox{{\bf  Classes}}
\entityintro{BaoBoard}{bao.BaoBoard}{Defines a Bao board, which contains state information, and for which moves can be made by players.}
\entityintro{BaoGame}{bao.BaoGame}{Encapsulates the procession of a typical Bao game, including turns and winning conditions, and allows for games of different Human/Computer players.}
\entityintro{Hole}{bao.Hole}{A helper class that encapsulates interface details on a playable hole on the board interface.}
\entityintro{Move}{bao.Move}{A helper class that encapsulates details about a move, namely direction, position and the move type.}
\entityintro{MoveType}{bao.MoveType}{Enumerates the 4 major classes of moves in the game of Bao.}
\vskip .1in
\vskip .1in
\section{\label{bao.BaoBoard}\index{BaoBoard}Class BaoBoard}{
\vskip .1in 
Defines a Bao board, which contains state information, and for which moves can be made by players.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public class BaoBoard
 extends java.lang.Object\end{lstlisting}
\subsection{Constructor summary}{
\begin{verse}
{\bf BaoBoard()} \\
{\bf BaoBoard(BaoBoard)} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf filledHolesInFrontRow(PlayerType)} \\
{\bf getBoard()} \\
{\bf getMoves(PlayerType, int)} \\
{\bf getMtajiCapMoves(PlayerType)} \\
{\bf getMtajiNonCapMoves(PlayerType)} \\
{\bf getNamuaCapMoves(PlayerType)} Function that returns a list of the available moves that will capture enemy seeds.\\
{\bf getNamuaNonCapMoves(PlayerType)} \\
{\bf isHouse(PlayerType, int)} Function to determine whether a certain position is the "house" hole for a player.\\
{\bf makeMove(Move, PlayerType)} \\
{\bf numVulnerable(PlayerType)} \\
{\bf placeSeed(PlayerType, int)} Function that increases a hole contents by one and returns any seeds that may have been captured by the action.\\
{\bf printBoard()} Helper function to print the board graphically to the console.\\
{\bf seedsOnBoard(PlayerType)} Function that calculates the total number of seeds that a player has on the board.\\
{\bf sow(PlayerType, int, Direction)} This function will sow the seeds in a given The function handles wrapping around corners, and will call itself recursively if the last seed placed captures again.\\
{\bf spread(PlayerType, int, Direction, boolean)} The function that is called in a Numua Takasa round.\\
{\bf sumHolesGreaterThan(PlayerType, int)} \\
\end{verse}
}
\subsection{Constructors}{
\vskip -2em
\begin{itemize}
\item{ 
\index{BaoBoard()}
{\bf  BaoBoard}\\
\begin{lstlisting}[frame=none]
public BaoBoard()\end{lstlisting} %end signature
}%end item
\item{ 
\index{BaoBoard(BaoBoard)}
{\bf  BaoBoard}\\
\begin{lstlisting}[frame=none]
public BaoBoard(BaoBoard from)\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{filledHolesInFrontRow(PlayerType)}
{\bf  filledHolesInFrontRow}\\
\begin{lstlisting}[frame=none]
public int filledHolesInFrontRow(player.PlayerType player)\end{lstlisting} %end signature
}%end item
\item{ 
\index{getBoard()}
{\bf  getBoard}\\
\begin{lstlisting}[frame=none]
public int[][] getBoard()\end{lstlisting} %end signature
}%end item
\item{ 
\index{getMoves(PlayerType, int)}
{\bf  getMoves}\\
\begin{lstlisting}[frame=none]
public java.util.ArrayList getMoves(player.PlayerType player,int numBankSeeds)\end{lstlisting} %end signature
}%end item
\item{ 
\index{getMtajiCapMoves(PlayerType)}
{\bf  getMtajiCapMoves}\\
\begin{lstlisting}[frame=none]
public java.util.ArrayList getMtajiCapMoves(player.PlayerType player)\end{lstlisting} %end signature
}%end item
\item{ 
\index{getMtajiNonCapMoves(PlayerType)}
{\bf  getMtajiNonCapMoves}\\
\begin{lstlisting}[frame=none]
public java.util.ArrayList getMtajiNonCapMoves(player.PlayerType player)\end{lstlisting} %end signature
}%end item
\item{ 
\index{getNamuaCapMoves(PlayerType)}
{\bf  getNamuaCapMoves}\\
\begin{lstlisting}[frame=none]
public java.util.ArrayList getNamuaCapMoves(player.PlayerType player)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Function that returns a list of the available moves that will capture enemy seeds. A player will have to pick one of these moves, if one exists.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{player} -- The player requesting to know which moves are avaliable}
  \end{itemize}
}%end item
\item{{\bf  Returns} -- 
An ArrayList containing integer locations of possible moves. 
}%end item
\end{itemize}
}%end item
\item{ 
\index{getNamuaNonCapMoves(PlayerType)}
{\bf  getNamuaNonCapMoves}\\
\begin{lstlisting}[frame=none]
public java.util.ArrayList getNamuaNonCapMoves(player.PlayerType player)\end{lstlisting} %end signature
}%end item
\item{ 
\index{isHouse(PlayerType, int)}
{\bf  isHouse}\\
\begin{lstlisting}[frame=none]
public boolean isHouse(player.PlayerType player,int position)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Function to determine whether a certain position is the "house" hole for a player. This is used for handling the fact that the house disappears after it has been sown.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{player} -- The player who is a asking whether their house exists.}
   \item{
\texttt{position} -- The position at which the player is asking whether their house exists.}
  \end{itemize}
}%end item
\end{itemize}
}%end item
\item{ 
\index{makeMove(Move, PlayerType)}
{\bf  makeMove}\\
\begin{lstlisting}[frame=none]
public BaoBoard makeMove(Move move,player.PlayerType player)\end{lstlisting} %end signature
}%end item
\item{ 
\index{numVulnerable(PlayerType)}
{\bf  numVulnerable}\\
\begin{lstlisting}[frame=none]
public int numVulnerable(player.PlayerType player)\end{lstlisting} %end signature
}%end item
\item{ 
\index{placeSeed(PlayerType, int)}
{\bf  placeSeed}\\
\begin{lstlisting}[frame=none]
public int placeSeed(player.PlayerType player,int position)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Function that increases a hole contents by one and returns any seeds that may have been captured by the action.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{player} -- The player placing the seed.}
   \item{
\texttt{position} -- The position at which the player wishes to place the seed.}
  \end{itemize}
}%end item
\item{{\bf  Returns} -- 
an integer containing the number of seeds captured. 
}%end item
\end{itemize}
}%end item
\item{ 
\index{printBoard()}
{\bf  printBoard}\\
\begin{lstlisting}[frame=none]
public void printBoard()\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Helper function to print the board graphically to the console.
}
\end{itemize}
}%end item
\item{ 
\index{seedsOnBoard(PlayerType)}
{\bf  seedsOnBoard}\\
\begin{lstlisting}[frame=none]
public int seedsOnBoard(player.PlayerType player)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Function that calculates the total number of seeds that a player has on the board. Used in the evaluation function.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{player} -- The player who is asking how many seeds they have on the board}
  \end{itemize}
}%end item
\item{{\bf  Returns} -- 
The number of seeds that the given player has on the board. 
}%end item
\end{itemize}
}%end item
\item{ 
\index{sow(PlayerType, int, Direction)}
{\bf  sow}\\
\begin{lstlisting}[frame=none]
public void sow(player.PlayerType player,int numCapturedSeeds,player.Direction direction)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

This function will sow the seeds in a given The function handles wrapping around corners, and will call itself recursively if the last seed placed captures again. Still need to add "house" semantics.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{player} -- yep}
   \item{
\texttt{numCapturedSeeds} -- }
   \item{
\texttt{direction} -- }
  \end{itemize}
}%end item
\end{itemize}
}%end item
\item{ 
\index{spread(PlayerType, int, Direction, boolean)}
{\bf  spread}\\
\begin{lstlisting}[frame=none]
public void spread(player.PlayerType player,int location,player.Direction direction,boolean add)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

The function that is called in a Numua Takasa round.
}
\end{itemize}
}%end item
\item{ 
\index{sumHolesGreaterThan(PlayerType, int)}
{\bf  sumHolesGreaterThan}\\
\begin{lstlisting}[frame=none]
public int sumHolesGreaterThan(player.PlayerType player,int z)\end{lstlisting} %end signature
}%end item
\end{itemize}
}
}
\section{\label{bao.BaoGame}\index{BaoGame}Class BaoGame}{
\vskip .1in 
Encapsulates the procession of a typical Bao game, including turns and winning conditions, and allows for games of different Human/Computer players.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public class BaoGame
 extends java.util.Observable\end{lstlisting}
\subsection{Field summary}{
\begin{verse}
{\bf board} \\
\end{verse}
}
\subsection{Constructor summary}{
\begin{verse}
{\bf BaoGame()} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf notifyWinner(String)} Function to notify that someone has won the game in this instance.\\
{\bf returnPlayers()} \\
{\bf start(Boolean, Boolean)} Controls the flow of a idiomatic Bao game, handles turn and win-checking.\\
{\bf stop()} Function that sets flags to stop the running of the game.\\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{board}
\label{bao.BaoGame.board}\texttt{public BaoBoard\ {\bf  board}}
}
\end{itemize}
}
\subsection{Constructors}{
\vskip -2em
\begin{itemize}
\item{ 
\index{BaoGame()}
{\bf  BaoGame}\\
\begin{lstlisting}[frame=none]
public BaoGame()\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{notifyWinner(String)}
{\bf  notifyWinner}\\
\begin{lstlisting}[frame=none]
public void notifyWinner(java.lang.String winnerName)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Function to notify that someone has won the game in this instance.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{winnerName} -- the name of the player that has won.}
  \end{itemize}
}%end item
\end{itemize}
}%end item
\item{ 
\index{returnPlayers()}
{\bf  returnPlayers}\\
\begin{lstlisting}[frame=none]
public java.util.ArrayList returnPlayers()\end{lstlisting} %end signature
}%end item
\item{ 
\index{start(Boolean, Boolean)}
{\bf  start}\\
\begin{lstlisting}[frame=none]
public void start(java.lang.Boolean isHumanPlayer1,java.lang.Boolean isHumanPlayer2)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Controls the flow of a idiomatic Bao game, handles turn and win-checking.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{isHumanPlayer1} -- Whether Player 1 in this particular game is played by a human.}
   \item{
\texttt{isHumanPlayer2} -- Whether Player 2 in this particular game is played by a human.}
  \end{itemize}
}%end item
\end{itemize}
}%end item
\item{ 
\index{stop()}
{\bf  stop}\\
\begin{lstlisting}[frame=none]
public void stop()\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Function that sets flags to stop the running of the game.
}
\end{itemize}
}%end item
\end{itemize}
}
\subsection{Members inherited from class Observable }{
\texttt{java.util.Observable} {\small 
\refdefined{java.util.Observable}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{public synchronized void {\bf  addObserver}(\texttt{Observer} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected synchronized void {\bf  clearChanged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public synchronized int {\bf  countObservers}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public synchronized void {\bf  deleteObserver}(\texttt{Observer} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public synchronized void {\bf  deleteObservers}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public synchronized boolean {\bf  hasChanged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  notifyObservers}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  notifyObservers}(\texttt{java.lang.Object} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected synchronized void {\bf  setChanged}()
}%end signature
}%end item
\end{itemize}
}
}
\section{\label{bao.Hole}\index{Hole}Class Hole}{
\vskip .1in 
A helper class that encapsulates interface details on a playable hole on the board interface.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public class Hole
 extends javafx.scene.control.Button\end{lstlisting}
\subsection{Field summary}{
\begin{verse}
{\bf x} The Hole's lateral position on the interface.\\
{\bf y} The Hole's vertical position on the interface.\\
\end{verse}
}
\subsection{Constructor summary}{
\begin{verse}
{\bf Hole(int, int)} \\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{x}
\label{bao.Hole.x}\texttt{public int\ {\bf  x}}
\begin{itemize}
\item{\vskip -.9ex 
The Hole's lateral position on the interface.}
\end{itemize}
}
\item{
\index{y}
\label{bao.Hole.y}\texttt{public int\ {\bf  y}}
\begin{itemize}
\item{\vskip -.9ex 
The Hole's vertical position on the interface.}
\end{itemize}
}
\end{itemize}
}
\subsection{Constructors}{
\vskip -2em
\begin{itemize}
\item{ 
\index{Hole(int, int)}
{\bf  Hole}\\
\begin{lstlisting}[frame=none]
public Hole(int x,int y)\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Button }{
\texttt{javafx.scene.control.Button} {\small 
\refdefined{javafx.scene.control.Button}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  cancelButtonProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected Skin {\bf  createDefaultSkin}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  defaultButtonProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  fire}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isCancelButton}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isDefaultButton}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setCancelButton}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setDefaultButton}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class ButtonBase }{
\texttt{javafx.scene.control.ButtonBase} {\small 
\refdefined{javafx.scene.control.ButtonBase}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{public void {\bf  arm}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyBooleanProperty {\bf  armedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  disarm}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  executeAccessibleAction}(\texttt{javafx.scene.AccessibleAction} {\bf  arg0},
\texttt{java.lang.Object\lbrack \rbrack } {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract void {\bf  fire}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnAction}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isArmed}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onActionProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnAction}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Labeled }{
\texttt{javafx.scene.control.Labeled} {\small 
\refdefined{javafx.scene.control.Labeled}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  alignmentProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  contentDisplayProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final StringProperty {\bf  ellipsisStringProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  fontProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Pos {\bf  getAlignment}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static List {\bf  getClassCssMetaData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Orientation {\bf  getContentBias}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ContentDisplay {\bf  getContentDisplay}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public List {\bf  getControlCssMetaData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  getEllipsisString}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Font {\bf  getFont}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Node {\bf  getGraphic}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getGraphicTextGap}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Insets {\bf  getLabelPadding}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getLineSpacing}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  getText}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final TextAlignment {\bf  getTextAlignment}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Paint {\bf  getTextFill}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final OverrunStyle {\bf  getTextOverrun}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  graphicProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  graphicTextGapProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected Pos {\bf  impl\_cssGetAlignmentInitialValue}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isMnemonicParsing}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isUnderline}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isWrapText}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  labelPaddingProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  lineSpacingProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  mnemonicParsingProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setAlignment}(\texttt{javafx.geometry.Pos} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setContentDisplay}(\texttt{ContentDisplay} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setEllipsisString}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setFont}(\texttt{javafx.scene.text.Font} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setGraphic}(\texttt{javafx.scene.Node} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setGraphicTextGap}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setLineSpacing}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setMnemonicParsing}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setText}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setTextAlignment}(\texttt{javafx.scene.text.TextAlignment} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setTextFill}(\texttt{javafx.scene.paint.Paint} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setTextOverrun}(\texttt{OverrunStyle} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setUnderline}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setWrapText}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  textAlignmentProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  textFillProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  textOverrunProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final StringProperty {\bf  textProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public String {\bf  toString}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  underlineProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  wrapTextProperty}()
}%end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Control }{
\texttt{javafx.scene.control.Control} {\small 
\refdefined{javafx.scene.control.Control}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMaxHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMaxWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMinHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMinWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computePrefHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computePrefWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  contextMenuProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected Skin {\bf  createDefaultSkin}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  executeAccessibleAction}(\texttt{javafx.scene.AccessibleAction} {\bf  arg0},
\texttt{java.lang.Object\lbrack \rbrack } {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  getBaselineOffset}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static List {\bf  getClassCssMetaData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ContextMenu {\bf  getContextMenu}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected List {\bf  getControlCssMetaData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final List {\bf  getCssMetaData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Skin {\bf  getSkin}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Tooltip {\bf  getTooltip}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected Boolean {\bf  impl\_cssGetFocusTraversableInitialValue}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  impl\_processCSS}(\texttt{javafx.beans.value.WritableValue} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  isResizable}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  layoutChildren}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Object {\bf  queryAccessibleAttribute}(\texttt{javafx.scene.AccessibleAttribute} {\bf  arg0},
\texttt{java.lang.Object\lbrack \rbrack } {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setContextMenu}(\texttt{ContextMenu} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setSkin}(\texttt{Skin} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setTooltip}(\texttt{Tooltip} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected StringProperty {\bf  skinClassNameProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  skinProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  tooltipProperty}()
}%end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Region }{
\texttt{javafx.scene.layout.Region} {\small 
\refdefined{javafx.scene.layout.Region}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  backgroundProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  borderProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  cacheShapeProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  centerShapeProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMaxHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMaxWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMinHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMinWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computePrefHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computePrefWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Background {\bf  getBackground}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Border {\bf  getBorder}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static List {\bf  getClassCssMetaData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public List {\bf  getCssMetaData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getHeight}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Insets {\bf  getInsets}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getMaxHeight}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getMaxWidth}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getMinHeight}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getMinWidth}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Insets {\bf  getOpaqueInsets}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Insets {\bf  getPadding}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getPrefHeight}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getPrefWidth}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Shape {\bf  getShape}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public String {\bf  getUserAgentStylesheet}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getWidth}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyDoubleProperty {\bf  heightProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected boolean {\bf  impl\_computeContains}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public BaseBounds {\bf  impl\_computeGeomBounds}(\texttt{com.sun.javafx.geom.BaseBounds} {\bf  arg0},
\texttt{com.sun.javafx.geom.transform.BaseTransform} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final Bounds {\bf  impl\_computeLayoutBounds}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public NGNode {\bf  impl\_createPeer}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  impl\_notifyLayoutBoundsChanged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  impl\_pickNodeLocal}(\texttt{com.sun.javafx.geom.PickRay} {\bf  arg0},
\texttt{com.sun.javafx.scene.input.PickResultChooser} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  impl\_updatePeer}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  insetsProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isCacheShape}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isCenterShape}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  isResizable}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isScaleShape}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isSnapToPixel}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  layoutInArea}(\texttt{javafx.scene.Node} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2},
\texttt{double} {\bf  arg3},
\texttt{double} {\bf  arg4},
\texttt{double} {\bf  arg5},
\texttt{javafx.geometry.HPos} {\bf  arg6},
\texttt{javafx.geometry.VPos} {\bf  arg7})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  layoutInArea}(\texttt{javafx.scene.Node} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2},
\texttt{double} {\bf  arg3},
\texttt{double} {\bf  arg4},
\texttt{double} {\bf  arg5},
\texttt{javafx.geometry.Insets} {\bf  arg6},
\texttt{boolean} {\bf  arg7},
\texttt{boolean} {\bf  arg8},
\texttt{javafx.geometry.HPos} {\bf  arg9},
\texttt{javafx.geometry.VPos} {\bf  arg10})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static void {\bf  layoutInArea}(\texttt{javafx.scene.Node} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2},
\texttt{double} {\bf  arg3},
\texttt{double} {\bf  arg4},
\texttt{double} {\bf  arg5},
\texttt{javafx.geometry.Insets} {\bf  arg6},
\texttt{boolean} {\bf  arg7},
\texttt{boolean} {\bf  arg8},
\texttt{javafx.geometry.HPos} {\bf  arg9},
\texttt{javafx.geometry.VPos} {\bf  arg10},
\texttt{boolean} {\bf  arg11})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  layoutInArea}(\texttt{javafx.scene.Node} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2},
\texttt{double} {\bf  arg3},
\texttt{double} {\bf  arg4},
\texttt{double} {\bf  arg5},
\texttt{javafx.geometry.Insets} {\bf  arg6},
\texttt{javafx.geometry.HPos} {\bf  arg7},
\texttt{javafx.geometry.VPos} {\bf  arg8})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  maxHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  maxHeightProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  maxWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  maxWidthProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  minHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  minHeightProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  minWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  minWidthProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  opaqueInsetsProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  paddingProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  positionInArea}(\texttt{javafx.scene.Node} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2},
\texttt{double} {\bf  arg3},
\texttt{double} {\bf  arg4},
\texttt{double} {\bf  arg5},
\texttt{javafx.geometry.HPos} {\bf  arg6},
\texttt{javafx.geometry.VPos} {\bf  arg7})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static void {\bf  positionInArea}(\texttt{javafx.scene.Node} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2},
\texttt{double} {\bf  arg3},
\texttt{double} {\bf  arg4},
\texttt{double} {\bf  arg5},
\texttt{javafx.geometry.Insets} {\bf  arg6},
\texttt{javafx.geometry.HPos} {\bf  arg7},
\texttt{javafx.geometry.VPos} {\bf  arg8},
\texttt{boolean} {\bf  arg9})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  prefHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  prefHeightProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  prefWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  prefWidthProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  resize}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  scaleShapeProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setBackground}(\texttt{Background} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setBorder}(\texttt{Border} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setCacheShape}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setCenterShape}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  setHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setMaxHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  setMaxSize}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setMaxWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setMinHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  setMinSize}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setMinWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOpaqueInsets}(\texttt{javafx.geometry.Insets} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setPadding}(\texttt{javafx.geometry.Insets} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setPrefHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  setPrefSize}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setPrefWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setScaleShape}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setShape}(\texttt{javafx.scene.shape.Shape} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setSnapToPixel}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  setWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  shapeProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  snappedBottomInset}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  snappedLeftInset}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  snappedRightInset}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  snappedTopInset}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  snapPosition}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  snapSize}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  snapSpace}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  snapToPixelProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static final {\bf  USE\_COMPUTED\_SIZE}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static final {\bf  USE\_PREF\_SIZE}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyDoubleProperty {\bf  widthProperty}()
}%end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Parent }{
\texttt{javafx.scene.Parent} {\small 
\refdefined{javafx.scene.Parent}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMinHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computeMinWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computePrefHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected double {\bf  computePrefWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  getBaselineOffset}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected ObservableList {\bf  getChildren}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public ObservableList {\bf  getChildrenUnmodifiable}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ParentTraversalEngine {\bf  getImpl\_traversalEngine}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected List {\bf  getManagedChildren}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObservableList {\bf  getStylesheets}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected boolean {\bf  impl\_computeContains}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public BaseBounds {\bf  impl\_computeGeomBounds}(\texttt{com.sun.javafx.geom.BaseBounds} {\bf  arg0},
\texttt{com.sun.javafx.geom.transform.BaseTransform} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected NGNode {\bf  impl\_createPeer}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public List {\bf  impl\_getAllParentStylesheets}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  impl\_pickNodeLocal}(\texttt{com.sun.javafx.geom.PickRay} {\bf  arg0},
\texttt{com.sun.javafx.scene.input.PickResultChooser} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  impl\_processCSS}(\texttt{javafx.beans.value.WritableValue} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Object {\bf  impl\_processMXNode}(\texttt{com.sun.javafx.jmx.MXNodeAlgorithm} {\bf  arg0},
\texttt{com.sun.javafx.jmx.MXNodeAlgorithmContext} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  impl\_traversalEngineProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  impl\_updatePeer}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isNeedsLayout}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  layout}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  layoutChildren}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Node {\bf  lookup}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  minHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  minWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyBooleanProperty {\bf  needsLayoutProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  prefHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  prefWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Object {\bf  queryAccessibleAttribute}(\texttt{AccessibleAttribute} {\bf  arg0},
\texttt{java.lang.Object\lbrack \rbrack } {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  requestLayout}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  requestParentLayout}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setImpl\_traversalEngine}(\texttt{com.sun.javafx.scene.traversal.ParentTraversalEngine} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  setNeedsLayout}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  updateBounds}()
}%end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Node }{
\texttt{javafx.scene.Node} {\small 
\refdefined{javafx.scene.Node}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  accessibleHelpProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  accessibleRoleDescriptionProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  accessibleRoleProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  accessibleTextProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  addEventFilter}(\texttt{javafx.event.EventType} {\bf  arg0},
\texttt{javafx.event.EventHandler} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  addEventHandler}(\texttt{javafx.event.EventType} {\bf  arg0},
\texttt{javafx.event.EventHandler} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  applyCss}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  autosize}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static final {\bf  BASELINE\_OFFSET\_SAME\_AS\_HEIGHT}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  blendModeProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  boundsInLocalProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  boundsInParentProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public EventDispatchChain {\bf  buildEventDispatchChain}(\texttt{javafx.event.EventDispatchChain} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  cacheHintProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  cacheProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  clipProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  computeAreaInScreen}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  contains}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  contains}(\texttt{javafx.geometry.Point2D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected boolean {\bf  containsBounds}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  cursorProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  depthTestProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyBooleanProperty {\bf  disabledProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  disableProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  effectiveNodeOrientationProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  effectProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  eventDispatcherProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  executeAccessibleAction}(\texttt{AccessibleAction} {\bf  arg0},
\texttt{java.lang.Object\lbrack \rbrack } {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  fireEvent}(\texttt{javafx.event.Event} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyBooleanProperty {\bf  focusedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  focusTraversableProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  getAccessibleHelp}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final AccessibleRole {\bf  getAccessibleRole}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  getAccessibleRoleDescription}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  getAccessibleText}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  getBaselineOffset}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BlendMode {\bf  getBlendMode}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Bounds {\bf  getBoundsInLocal}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Bounds {\bf  getBoundsInParent}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final CacheHint {\bf  getCacheHint}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static List {\bf  getClassCssMetaData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Node {\bf  getClip}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Orientation {\bf  getContentBias}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public List {\bf  getCssMetaData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Cursor {\bf  getCursor}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DepthTest {\bf  getDepthTest}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Effect {\bf  getEffect}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final NodeOrientation {\bf  getEffectiveNodeOrientation}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventDispatcher {\bf  getEventDispatcher}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  getId}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final InputMethodRequests {\bf  getInputMethodRequests}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Bounds {\bf  getLayoutBounds}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getLayoutX}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getLayoutY}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Transform {\bf  getLocalToParentTransform}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Transform {\bf  getLocalToSceneTransform}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final NodeOrientation {\bf  getNodeOrientation}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnContextMenuRequested}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnDragDetected}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnDragDone}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnDragDropped}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnDragEntered}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnDragExited}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnDragOver}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnInputMethodTextChanged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnKeyPressed}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnKeyReleased}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnKeyTyped}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseClicked}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseDragEntered}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseDragExited}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseDragged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseDragOver}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseDragReleased}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseEntered}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseExited}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseMoved}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMousePressed}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnMouseReleased}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnRotate}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnRotationFinished}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnRotationStarted}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnScroll}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnScrollFinished}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnScrollStarted}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnSwipeDown}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnSwipeLeft}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnSwipeRight}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnSwipeUp}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnTouchMoved}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnTouchPressed}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnTouchReleased}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnTouchStationary}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnZoom}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnZoomFinished}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final EventHandler {\bf  getOnZoomStarted}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getOpacity}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Parent {\bf  getParent}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObservableMap {\bf  getProperties}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObservableSet {\bf  getPseudoClassStates}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getRotate}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Point3D {\bf  getRotationAxis}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getScaleX}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getScaleY}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getScaleZ}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Scene {\bf  getScene}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  getStyle}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Styleable {\bf  getStyleableParent}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObservableList {\bf  getStyleClass}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObservableList {\bf  getTransforms}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getTranslateX}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getTranslateY}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  getTranslateZ}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public String {\bf  getTypeSelector}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Object {\bf  getUserData}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  hasProperties}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyBooleanProperty {\bf  hoverProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final StringProperty {\bf  idProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  impl\_clearDirty}(\texttt{com.sun.javafx.scene.DirtyBits} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected abstract boolean {\bf  impl\_computeContains}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract BaseBounds {\bf  impl\_computeGeomBounds}(\texttt{com.sun.javafx.geom.BaseBounds} {\bf  arg0},
\texttt{com.sun.javafx.geom.transform.BaseTransform} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected boolean {\bf  impl\_computeIntersects}(\texttt{com.sun.javafx.geom.PickRay} {\bf  arg0},
\texttt{com.sun.javafx.scene.input.PickResultChooser} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected Bounds {\bf  impl\_computeLayoutBounds}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected abstract NGNode {\bf  impl\_createPeer}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected Cursor {\bf  impl\_cssGetCursorInitialValue}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected Boolean {\bf  impl\_cssGetFocusTraversableInitialValue}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Map {\bf  impl\_findStyles}(\texttt{java.util.Map} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  impl\_geomChanged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BaseTransform {\bf  impl\_getLeafTransform}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static List {\bf  impl\_getMatchingStyles}(\texttt{javafx.css.CssMetaData} {\bf  arg0},
\texttt{javafx.css.Styleable} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public NGNode {\bf  impl\_getPeer}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  impl\_getPivotX}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  impl\_getPivotY}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final double {\bf  impl\_getPivotZ}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObservableMap {\bf  impl\_getStyleMap}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  impl\_hasTransforms}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final boolean {\bf  impl\_intersects}(\texttt{com.sun.javafx.geom.PickRay} {\bf  arg0},
\texttt{com.sun.javafx.scene.input.PickResultChooser} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final double {\bf  impl\_intersectsBounds}(\texttt{com.sun.javafx.geom.PickRay} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final boolean {\bf  impl\_isDirty}(\texttt{com.sun.javafx.scene.DirtyBits} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final boolean {\bf  impl\_isDirtyEmpty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  impl\_isShowMnemonics}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  impl\_isTreeVisible}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  impl\_layoutBoundsChanged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  impl\_markDirty}(\texttt{com.sun.javafx.scene.DirtyBits} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  impl\_notifyLayoutBoundsChanged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  impl\_pickNode}(\texttt{com.sun.javafx.geom.PickRay} {\bf  arg0},
\texttt{com.sun.javafx.scene.input.PickResultChooser} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  impl\_pickNodeLocal}(\texttt{com.sun.javafx.geom.PickRay} {\bf  arg0},
\texttt{com.sun.javafx.scene.input.PickResultChooser} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  impl\_processCSS}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected void {\bf  impl\_processCSS}(\texttt{javafx.beans.value.WritableValue} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Object {\bf  impl\_processMXNode}(\texttt{com.sun.javafx.jmx.MXNodeAlgorithm} {\bf  arg0},
\texttt{com.sun.javafx.jmx.MXNodeAlgorithmContext} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  impl\_reapplyCSS}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  impl\_setShowMnemonics}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  impl\_setStyleMap}(\texttt{javafx.collections.ObservableMap} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  impl\_showMnemonicsProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  impl\_syncPeer}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  impl\_transformsChanged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  impl\_traverse}(\texttt{com.sun.javafx.scene.traversal.Direction} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final BooleanExpression {\bf  impl\_treeVisibleProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  impl\_updatePeer}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  inputMethodRequestsProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  intersects}(\texttt{javafx.geometry.Bounds} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  intersects}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2},
\texttt{double} {\bf  arg3})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isCache}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isDisable}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isDisabled}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isFocused}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isFocusTraversable}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isHover}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isManaged}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isMouseTransparent}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isPickOnBounds}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isPressed}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  isResizable}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  isVisible}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  layoutBoundsProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  layoutXProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  layoutYProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Bounds {\bf  localToParent}(\texttt{javafx.geometry.Bounds} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToParent}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  localToParent}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToParent}(\texttt{javafx.geometry.Point2D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  localToParent}(\texttt{javafx.geometry.Point3D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  localToParentTransformProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Bounds {\bf  localToScene}(\texttt{javafx.geometry.Bounds} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Bounds {\bf  localToScene}(\texttt{javafx.geometry.Bounds} {\bf  arg0},
\texttt{boolean} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToScene}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToScene}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{boolean} {\bf  arg2})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  localToScene}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  localToScene}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2},
\texttt{boolean} {\bf  arg3})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToScene}(\texttt{javafx.geometry.Point2D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToScene}(\texttt{javafx.geometry.Point2D} {\bf  arg0},
\texttt{boolean} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  localToScene}(\texttt{javafx.geometry.Point3D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  localToScene}(\texttt{javafx.geometry.Point3D} {\bf  arg0},
\texttt{boolean} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  localToSceneTransformProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Bounds {\bf  localToScreen}(\texttt{javafx.geometry.Bounds} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToScreen}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToScreen}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToScreen}(\texttt{javafx.geometry.Point2D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  localToScreen}(\texttt{javafx.geometry.Point3D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Node {\bf  lookup}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Set {\bf  lookupAll}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  managedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  maxHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  maxWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  minHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  minWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  mouseTransparentProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  nodeOrientationProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  notifyAccessibleAttributeChanged}(\texttt{AccessibleAttribute} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onContextMenuRequestedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onDragDetectedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onDragDoneProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onDragDroppedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onDragEnteredProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onDragExitedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onDragOverProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onInputMethodTextChangedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onKeyPressedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onKeyReleasedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onKeyTypedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseClickedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseDragEnteredProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseDragExitedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseDraggedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseDragOverProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseDragReleasedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseEnteredProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseExitedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseMovedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMousePressedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onMouseReleasedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onRotateProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onRotationFinishedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onRotationStartedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onScrollFinishedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onScrollProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onScrollStartedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onSwipeDownProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onSwipeLeftProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onSwipeRightProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onSwipeUpProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onTouchMovedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onTouchPressedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onTouchReleasedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onTouchStationaryProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onZoomFinishedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onZoomProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  onZoomStartedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  opacityProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  parentProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Bounds {\bf  parentToLocal}(\texttt{javafx.geometry.Bounds} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  parentToLocal}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  parentToLocal}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  parentToLocal}(\texttt{javafx.geometry.Point2D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  parentToLocal}(\texttt{javafx.geometry.Point3D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  pickOnBoundsProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  prefHeight}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public double {\bf  prefWidth}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyBooleanProperty {\bf  pressedProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  pseudoClassStateChanged}(\texttt{javafx.css.PseudoClass} {\bf  arg0},
\texttt{boolean} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Object {\bf  queryAccessibleAttribute}(\texttt{AccessibleAttribute} {\bf  arg0},
\texttt{java.lang.Object\lbrack \rbrack } {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  relocate}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  removeEventFilter}(\texttt{javafx.event.EventType} {\bf  arg0},
\texttt{javafx.event.EventHandler} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  removeEventHandler}(\texttt{javafx.event.EventType} {\bf  arg0},
\texttt{javafx.event.EventHandler} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  requestFocus}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  resize}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  resizeRelocate}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2},
\texttt{double} {\bf  arg3})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  rotateProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ObjectProperty {\bf  rotationAxisProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  scaleXProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  scaleYProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  scaleZProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final ReadOnlyObjectProperty {\bf  sceneProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Bounds {\bf  sceneToLocal}(\texttt{javafx.geometry.Bounds} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Bounds {\bf  sceneToLocal}(\texttt{javafx.geometry.Bounds} {\bf  arg0},
\texttt{boolean} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  sceneToLocal}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  sceneToLocal}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{boolean} {\bf  arg2})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  sceneToLocal}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1},
\texttt{double} {\bf  arg2})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  sceneToLocal}(\texttt{javafx.geometry.Point2D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  sceneToLocal}(\texttt{javafx.geometry.Point2D} {\bf  arg0},
\texttt{boolean} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point3D {\bf  sceneToLocal}(\texttt{javafx.geometry.Point3D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Bounds {\bf  screenToLocal}(\texttt{javafx.geometry.Bounds} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  screenToLocal}(\texttt{double} {\bf  arg0},
\texttt{double} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Point2D {\bf  screenToLocal}(\texttt{javafx.geometry.Point2D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setAccessibleHelp}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setAccessibleRole}(\texttt{AccessibleRole} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setAccessibleRoleDescription}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setAccessibleText}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setBlendMode}(\texttt{effect.BlendMode} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setCache}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setCacheHint}(\texttt{CacheHint} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setClip}(\texttt{Node} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setCursor}(\texttt{Cursor} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setDepthTest}(\texttt{DepthTest} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setDisable}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  setDisabled}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setEffect}(\texttt{effect.Effect} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setEventDispatcher}(\texttt{javafx.event.EventDispatcher} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  setEventHandler}(\texttt{javafx.event.EventType} {\bf  arg0},
\texttt{javafx.event.EventHandler} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  setFocused}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setFocusTraversable}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  setHover}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setId}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setInputMethodRequests}(\texttt{input.InputMethodRequests} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setLayoutX}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setLayoutY}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setManaged}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setMouseTransparent}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setNodeOrientation}(\texttt{javafx.geometry.NodeOrientation} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnContextMenuRequested}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnDragDetected}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnDragDone}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnDragDropped}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnDragEntered}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnDragExited}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnDragOver}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnInputMethodTextChanged}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnKeyPressed}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnKeyReleased}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnKeyTyped}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseClicked}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseDragEntered}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseDragExited}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseDragged}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseDragOver}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseDragReleased}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseEntered}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseExited}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseMoved}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMousePressed}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnMouseReleased}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnRotate}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnRotationFinished}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnRotationStarted}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnScroll}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnScrollFinished}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnScrollStarted}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnSwipeDown}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnSwipeLeft}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnSwipeRight}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnSwipeUp}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnTouchMoved}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnTouchPressed}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnTouchReleased}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnTouchStationary}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnZoom}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnZoomFinished}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOnZoomStarted}(\texttt{javafx.event.EventHandler} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setOpacity}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setPickOnBounds}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  setPressed}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setRotate}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setRotationAxis}(\texttt{javafx.geometry.Point3D} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setScaleX}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setScaleY}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setScaleZ}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setStyle}(\texttt{java.lang.String} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setTranslateX}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setTranslateY}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setTranslateZ}(\texttt{double} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  setUserData}(\texttt{java.lang.Object} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final void {\bf  setVisible}(\texttt{boolean} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  snapshot}(\texttt{javafx.util.Callback} {\bf  arg0},
\texttt{SnapshotParameters} {\bf  arg1},
\texttt{image.WritableImage} {\bf  arg2})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public WritableImage {\bf  snapshot}(\texttt{SnapshotParameters} {\bf  arg0},
\texttt{image.WritableImage} {\bf  arg1})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public Dragboard {\bf  startDragAndDrop}(\texttt{input.TransferMode\lbrack \rbrack } {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  startFullDrag}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final StringProperty {\bf  styleProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  toBack}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  toFront}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public String {\bf  toString}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  translateXProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  translateYProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final DoubleProperty {\bf  translateZProperty}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public boolean {\bf  usesMirroring}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final BooleanProperty {\bf  visibleProperty}()
}%end signature
}%end item
\end{itemize}
}
}
\section{\label{bao.Move}\index{Move}Class Move}{
\vskip .1in 
A helper class that encapsulates details about a move, namely direction, position and the move type.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public class Move
 extends java.lang.Object\end{lstlisting}
\subsection{Constructor summary}{
\begin{verse}
{\bf Move(int, Direction, MoveType)} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf getDirection()} \\
{\bf getLocation()} \\
{\bf getMoveType()} \\
{\bf toString()} A helper function to generate a human-readable representation of the Move.\\
\end{verse}
}
\subsection{Constructors}{
\vskip -2em
\begin{itemize}
\item{ 
\index{Move(int, Direction, MoveType)}
{\bf  Move}\\
\begin{lstlisting}[frame=none]
public Move(int location,player.Direction direction,MoveType moveType)\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{getDirection()}
{\bf  getDirection}\\
\begin{lstlisting}[frame=none]
public player.Direction getDirection()\end{lstlisting} %end signature
}%end item
\item{ 
\index{getLocation()}
{\bf  getLocation}\\
\begin{lstlisting}[frame=none]
public int getLocation()\end{lstlisting} %end signature
}%end item
\item{ 
\index{getMoveType()}
{\bf  getMoveType}\\
\begin{lstlisting}[frame=none]
public MoveType getMoveType()\end{lstlisting} %end signature
}%end item
\item{ 
\index{toString()}
{\bf  toString}\\
\begin{lstlisting}[frame=none]
public java.lang.String toString()\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

A helper function to generate a human-readable representation of the Move.
}
\item{{\bf  Returns} -- 
a string containing the printable version of the Move. 
}%end item
\end{itemize}
}%end item
\end{itemize}
}
}
\section{\label{bao.MoveType}\index{MoveType}Class MoveType}{
\vskip .1in 
Enumerates the 4 major classes of moves in the game of Bao.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public final class MoveType
 extends java.lang.Enum\end{lstlisting}
\subsection{Field summary}{
\begin{verse}
{\bf MtajiCapture} A move\\
{\bf MtajiTakasa} A move\\
{\bf NamuaCapture} A move in which the player captures 1 or more of the opponents seeds, but a new seed is still introduced to the board.\\
{\bf NamuaTakasa} A move in which the player sows their seeds, but a new seed is still introduced to the board.\\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf valueOf(String)} \\
{\bf values()} \\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{NamuaCapture}
\label{bao.MoveType.NamuaCapture}\texttt{public static final MoveType\ {\bf  NamuaCapture}}
\begin{itemize}
\item{\vskip -.9ex 
A move in which the player captures 1 or more of the opponents seeds, but a new seed is still introduced to the board.}
\end{itemize}
}
\item{
\index{NamuaTakasa}
\label{bao.MoveType.NamuaTakasa}\texttt{public static final MoveType\ {\bf  NamuaTakasa}}
\begin{itemize}
\item{\vskip -.9ex 
A move in which the player sows their seeds, but a new seed is still introduced to the board.}
\end{itemize}
}
\item{
\index{MtajiCapture}
\label{bao.MoveType.MtajiCapture}\texttt{public static final MoveType\ {\bf  MtajiCapture}}
\begin{itemize}
\item{\vskip -.9ex 
A move}
\end{itemize}
}
\item{
\index{MtajiTakasa}
\label{bao.MoveType.MtajiTakasa}\texttt{public static final MoveType\ {\bf  MtajiTakasa}}
\begin{itemize}
\item{\vskip -.9ex 
A move}
\end{itemize}
}
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{valueOf(String)}
{\bf  valueOf}\\
\begin{lstlisting}[frame=none]
public static MoveType valueOf(java.lang.String name)\end{lstlisting} %end signature
}%end item
\item{ 
\index{values()}
{\bf  values}\\
\begin{lstlisting}[frame=none]
public static MoveType[] values()\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Enum }{
\texttt{java.lang.Enum} {\small 
\refdefined{java.lang.Enum}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{protected final Object {\bf  clone}() throws CloneNotSupportedException
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  compareTo}(\texttt{Enum} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  equals}(\texttt{Object} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  finalize}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Class {\bf  getDeclaringClass}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  hashCode}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  name}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  ordinal}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public String {\bf  toString}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static Enum {\bf  valueOf}(\texttt{Class} {\bf  arg0},
\texttt{String} {\bf  arg1})
}%end signature
}%end item
\end{itemize}
}
}
}
\chapter{Package bao.player}{
\label{bao.player}\hskip -.05in
\hbox to \hsize{\textit{ Package Contents\hfil Page}}
\vskip .13in
\hbox{{\bf  Classes}}
\entityintro{AIPlayer}{bao.player.AIPlayer}{Defines a concrete BaoPlayer, which uses a game tree and suitable heuristics to determine next moves.}
\entityintro{BaoPlayer}{bao.player.BaoPlayer}{Defines an abstract Bao player, which is fully implemented by HumanPlayer and AI Player}
\entityintro{Direction}{bao.player.Direction}{Enumerates the direction options \textit{ LEFT} and \textit{ RIGHT} to enable cleaner, more readable control structures.}
\entityintro{HumanPlayer}{bao.player.HumanPlayer}{Defines a concrete BaoPlayer, which is fully implemented by HumanPlayer and AI Player}
\entityintro{PlayerType}{bao.player.PlayerType}{Enumerates the options PLAYER\_1 and PLAYER\_2 to enable cleaner, more readable control structures.}
\entityintro{TurnType}{bao.player.TurnType}{An enum that enumerates the two major types of turns in the game procession.}
\vskip .1in
\vskip .1in
\section{\label{bao.player.AIPlayer}\index{AIPlayer}Class AIPlayer}{
\vskip .1in 
Defines a concrete BaoPlayer, which uses a game tree and suitable heuristics to determine next moves.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public class AIPlayer
 extends bao.player.BaoPlayer\end{lstlisting}
\subsection{Constructor summary}{
\begin{verse}
{\bf AIPlayer(BaoBoard, PlayerType, int)} Constructor, currently does not use the depth parameter\\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf getDirection()} Function that determines the optimal direction for a move to be made in.\\
{\bf getMtajiCapMove()} Gets next Mtaji capture move.\\
{\bf getMtajiNonCapMove()} Gets next Mtaji Takasa move.\\
{\bf getNamuaCapMove(ArrayList)} Gets next Numua capture move.\\
{\bf getNamuaNonCapMove(ArrayList)} Gets next Numua capture move.\\
\end{verse}
}
\subsection{Constructors}{
\vskip -2em
\begin{itemize}
\item{ 
\index{AIPlayer(BaoBoard, PlayerType, int)}
{\bf  AIPlayer}\\
\begin{lstlisting}[frame=none]
public AIPlayer(bao.BaoBoard board,PlayerType playerType,int depth)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Constructor, currently does not use the depth parameter
}
\end{itemize}
}%end item
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{getDirection()}
{\bf  getDirection}\\
\begin{lstlisting}[frame=none]
public Direction getDirection()\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Function that determines the optimal direction for a move to be made in.
}
\item{{\bf  Returns} -- 
Direction The direction that the algorithm has selected. 
}%end item
\end{itemize}
}%end item
\item{ 
\index{getMtajiCapMove()}
{\bf  getMtajiCapMove}\\
\begin{lstlisting}[frame=none]
public bao.Move getMtajiCapMove()\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Gets next Mtaji capture move. Invokes GameTree's abprune method.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{captureMoves} -- an ArrayList of integers listing the possible capture locations.}
  \end{itemize}
}%end item
\item{{\bf  Returns} -- 
A Move object representing the most ideal move as identified by the algorithm. 
}%end item
\end{itemize}
}%end item
\item{ 
\index{getMtajiNonCapMove()}
{\bf  getMtajiNonCapMove}\\
\begin{lstlisting}[frame=none]
public bao.Move getMtajiNonCapMove()\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Gets next Mtaji Takasa move. Invokes GameTree's abprune method.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{captureMoves} -- an ArrayList of integers listing the possible capture locations.}
  \end{itemize}
}%end item
\item{{\bf  Returns} -- 
A Move object representing the most ideal move as identified by the algorithm. 
}%end item
\end{itemize}
}%end item
\item{ 
\index{getNamuaCapMove(ArrayList)}
{\bf  getNamuaCapMove}\\
\begin{lstlisting}[frame=none]
public bao.Move getNamuaCapMove(java.util.ArrayList captureMoves)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Gets next Numua capture move. Invokes GameTree's abprune method.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{captureMoves} -- an ArrayList of integers listing the possible capture locations.}
  \end{itemize}
}%end item
\item{{\bf  Returns} -- 
A Move object representing the most ideal move as identified by the algorithm. 
}%end item
\end{itemize}
}%end item
\item{ 
\index{getNamuaNonCapMove(ArrayList)}
{\bf  getNamuaNonCapMove}\\
\begin{lstlisting}[frame=none]
public bao.Move getNamuaNonCapMove(java.util.ArrayList nonCaptureMoves)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Gets next Numua capture move. Invokes GameTree's abprune method.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{nonCaptureMoves} -- an ArrayList of integers listing the possible capture locations.}
  \end{itemize}
}%end item
\item{{\bf  Returns} -- 
A Move object representing the most ideal move as identified by the algorithm. 
}%end item
\end{itemize}
}%end item
\end{itemize}
}
\subsection{Members inherited from class BaoPlayer }{
\texttt{bao.player.BaoPlayer} {\small 
\refdefined{bao.player.BaoPlayer}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{public void {\bf  attachOpponent}(\texttt{BaoPlayer} {\bf  opponent})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected {\bf  board}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  direction}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Direction {\bf  getDirection}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Move {\bf  getMtajiCapMove}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Move {\bf  getMtajiNonCapMove}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Move {\bf  getNamuaCapMove}(\texttt{java.util.ArrayList} {\bf  captureMoves})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Move {\bf  getNamuaNonCapMove}(\texttt{java.util.ArrayList} {\bf  nonCaptureMoves})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public volatile {\bf  inRunningInstance}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  mtajiCapLocation}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  mtajiNonCapLocation}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  nextTurn}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  opponent}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  playerType}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  seedLocation}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  seedsInStock}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  takasaLocation}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public volatile {\bf  turnDone}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  turnType}}%end signature
}%end item
\end{itemize}
}
}
\section{\label{bao.player.BaoPlayer}\index{BaoPlayer}Class BaoPlayer}{
\vskip .1in 
Defines an abstract Bao player, which is fully implemented by HumanPlayer and AI Player\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public abstract class BaoPlayer
 extends java.lang.Object\end{lstlisting}
\subsection{All known subclasses}{HumanPlayer\small{\refdefined{bao.player.HumanPlayer}}, AIPlayer\small{\refdefined{bao.player.AIPlayer}}}
\subsection{Field summary}{
\begin{verse}
{\bf board} \\
{\bf direction} \\
{\bf inRunningInstance} \\
{\bf mtajiCapLocation} \\
{\bf mtajiNonCapLocation} \\
{\bf opponent} \\
{\bf playerType} \\
{\bf seedLocation} \\
{\bf seedsInStock} \\
{\bf takasaLocation} \\
{\bf turnDone} \\
{\bf turnType} \\
\end{verse}
}
\subsection{Constructor summary}{
\begin{verse}
{\bf BaoPlayer(BaoBoard, PlayerType)} Constructor for BaoPlayer.\\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf attachOpponent(BaoPlayer)} \\
{\bf getDirection()} \\
{\bf getMtajiCapMove()} \\
{\bf getMtajiNonCapMove()} \\
{\bf getNamuaCapMove(ArrayList)} \\
{\bf getNamuaNonCapMove(ArrayList)} \\
{\bf nextTurn()} Function that controls the structure of a Bao turn, and directs behaviour based on the type of turn that is occuring.\\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{seedLocation}
\label{bao.player.BaoPlayer.seedLocation}\texttt{public java.util.concurrent.atomic.AtomicInteger\ {\bf  seedLocation}}
}
\item{
\index{takasaLocation}
\label{bao.player.BaoPlayer.takasaLocation}\texttt{public java.util.concurrent.atomic.AtomicInteger\ {\bf  takasaLocation}}
}
\item{
\index{mtajiCapLocation}
\label{bao.player.BaoPlayer.mtajiCapLocation}\texttt{public java.util.concurrent.atomic.AtomicInteger\ {\bf  mtajiCapLocation}}
}
\item{
\index{mtajiNonCapLocation}
\label{bao.player.BaoPlayer.mtajiNonCapLocation}\texttt{public java.util.concurrent.atomic.AtomicInteger\ {\bf  mtajiNonCapLocation}}
}
\item{
\index{direction}
\label{bao.player.BaoPlayer.direction}\texttt{public Direction\ {\bf  direction}}
}
\item{
\index{turnDone}
\label{bao.player.BaoPlayer.turnDone}\texttt{public volatile boolean\ {\bf  turnDone}}
}
\item{
\index{turnType}
\label{bao.player.BaoPlayer.turnType}\texttt{public TurnType\ {\bf  turnType}}
}
\item{
\index{opponent}
\label{bao.player.BaoPlayer.opponent}\texttt{public BaoPlayer\ {\bf  opponent}}
}
\item{
\index{playerType}
\label{bao.player.BaoPlayer.playerType}\texttt{public PlayerType\ {\bf  playerType}}
}
\item{
\index{board}
\label{bao.player.BaoPlayer.board}\texttt{protected bao.BaoBoard\ {\bf  board}}
}
\item{
\index{seedsInStock}
\label{bao.player.BaoPlayer.seedsInStock}\texttt{public int\ {\bf  seedsInStock}}
}
\item{
\index{inRunningInstance}
\label{bao.player.BaoPlayer.inRunningInstance}\texttt{public volatile boolean\ {\bf  inRunningInstance}}
}
\end{itemize}
}
\subsection{Constructors}{
\vskip -2em
\begin{itemize}
\item{ 
\index{BaoPlayer(BaoBoard, PlayerType)}
{\bf  BaoPlayer}\\
\begin{lstlisting}[frame=none]
public BaoPlayer(bao.BaoBoard board,PlayerType playerType)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Constructor for BaoPlayer.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{board} -- the board that this player will bind to and play on.}
   \item{
\texttt{playerType} -- the type of player (Player1/Player2) that the player will play as.}
  \end{itemize}
}%end item
\end{itemize}
}%end item
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{attachOpponent(BaoPlayer)}
{\bf  attachOpponent}\\
\begin{lstlisting}[frame=none]
public void attachOpponent(BaoPlayer opponent)\end{lstlisting} %end signature
}%end item
\item{ 
\index{getDirection()}
{\bf  getDirection}\\
\begin{lstlisting}[frame=none]
public abstract Direction getDirection()\end{lstlisting} %end signature
}%end item
\item{ 
\index{getMtajiCapMove()}
{\bf  getMtajiCapMove}\\
\begin{lstlisting}[frame=none]
public abstract bao.Move getMtajiCapMove()\end{lstlisting} %end signature
}%end item
\item{ 
\index{getMtajiNonCapMove()}
{\bf  getMtajiNonCapMove}\\
\begin{lstlisting}[frame=none]
public abstract bao.Move getMtajiNonCapMove()\end{lstlisting} %end signature
}%end item
\item{ 
\index{getNamuaCapMove(ArrayList)}
{\bf  getNamuaCapMove}\\
\begin{lstlisting}[frame=none]
public abstract bao.Move getNamuaCapMove(java.util.ArrayList captureMoves)\end{lstlisting} %end signature
}%end item
\item{ 
\index{getNamuaNonCapMove(ArrayList)}
{\bf  getNamuaNonCapMove}\\
\begin{lstlisting}[frame=none]
public abstract bao.Move getNamuaNonCapMove(java.util.ArrayList nonCaptureMoves)\end{lstlisting} %end signature
}%end item
\item{ 
\index{nextTurn()}
{\bf  nextTurn}\\
\begin{lstlisting}[frame=none]
public void nextTurn()\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Function that controls the structure of a Bao turn, and directs behaviour based on the type of turn that is occuring. The concept of a turn is fixed for both Human and AI players, and hence can be described abstractly, and only the method of obtaining moves directions can be specified for concrete Bao players.
}
\end{itemize}
}%end item
\end{itemize}
}
}
\section{\label{bao.player.Direction}\index{Direction}Class Direction}{
\vskip .1in 
Enumerates the direction options \textit{ LEFT} and \textit{ RIGHT} to enable cleaner, more readable control structures.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public final class Direction
 extends java.lang.Enum\end{lstlisting}
\subsection{Field summary}{
\begin{verse}
{\bf LEFT} \\
{\bf RIGHT} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf valueOf(String)} \\
{\bf values()} \\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{LEFT}
\label{bao.player.Direction.LEFT}\texttt{public static final Direction\ {\bf  LEFT}}
}
\item{
\index{RIGHT}
\label{bao.player.Direction.RIGHT}\texttt{public static final Direction\ {\bf  RIGHT}}
}
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{valueOf(String)}
{\bf  valueOf}\\
\begin{lstlisting}[frame=none]
public static Direction valueOf(java.lang.String name)\end{lstlisting} %end signature
}%end item
\item{ 
\index{values()}
{\bf  values}\\
\begin{lstlisting}[frame=none]
public static Direction[] values()\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Enum }{
\texttt{java.lang.Enum} {\small 
\refdefined{java.lang.Enum}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{protected final Object {\bf  clone}() throws CloneNotSupportedException
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  compareTo}(\texttt{Enum} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  equals}(\texttt{Object} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  finalize}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Class {\bf  getDeclaringClass}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  hashCode}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  name}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  ordinal}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public String {\bf  toString}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static Enum {\bf  valueOf}(\texttt{Class} {\bf  arg0},
\texttt{String} {\bf  arg1})
}%end signature
}%end item
\end{itemize}
}
}
\section{\label{bao.player.HumanPlayer}\index{HumanPlayer}Class HumanPlayer}{
\vskip .1in 
Defines a concrete BaoPlayer, which is fully implemented by HumanPlayer and AI Player\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public class HumanPlayer
 extends bao.player.BaoPlayer\end{lstlisting}
\subsection{Constructor summary}{
\begin{verse}
{\bf HumanPlayer(BaoBoard, PlayerType)} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf getDirection()} \\
{\bf getMtajiCapMove()} \\
{\bf getMtajiNonCapMove()} \\
{\bf getNamuaCapMove(ArrayList)} \\
{\bf getNamuaNonCapMove(ArrayList)} \\
\end{verse}
}
\subsection{Constructors}{
\vskip -2em
\begin{itemize}
\item{ 
\index{HumanPlayer(BaoBoard, PlayerType)}
{\bf  HumanPlayer}\\
\begin{lstlisting}[frame=none]
public HumanPlayer(bao.BaoBoard board,PlayerType playerType)\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{getDirection()}
{\bf  getDirection}\\
\begin{lstlisting}[frame=none]
public abstract Direction getDirection()\end{lstlisting} %end signature
}%end item
\item{ 
\index{getMtajiCapMove()}
{\bf  getMtajiCapMove}\\
\begin{lstlisting}[frame=none]
public abstract bao.Move getMtajiCapMove()\end{lstlisting} %end signature
}%end item
\item{ 
\index{getMtajiNonCapMove()}
{\bf  getMtajiNonCapMove}\\
\begin{lstlisting}[frame=none]
public abstract bao.Move getMtajiNonCapMove()\end{lstlisting} %end signature
}%end item
\item{ 
\index{getNamuaCapMove(ArrayList)}
{\bf  getNamuaCapMove}\\
\begin{lstlisting}[frame=none]
public abstract bao.Move getNamuaCapMove(java.util.ArrayList captureMoves)\end{lstlisting} %end signature
}%end item
\item{ 
\index{getNamuaNonCapMove(ArrayList)}
{\bf  getNamuaNonCapMove}\\
\begin{lstlisting}[frame=none]
public abstract bao.Move getNamuaNonCapMove(java.util.ArrayList nonCaptureMoves)\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class BaoPlayer }{
\texttt{bao.player.BaoPlayer} {\small 
\refdefined{bao.player.BaoPlayer}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{public void {\bf  attachOpponent}(\texttt{BaoPlayer} {\bf  opponent})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected {\bf  board}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  direction}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Direction {\bf  getDirection}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Move {\bf  getMtajiCapMove}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Move {\bf  getMtajiNonCapMove}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Move {\bf  getNamuaCapMove}(\texttt{java.util.ArrayList} {\bf  captureMoves})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public abstract Move {\bf  getNamuaNonCapMove}(\texttt{java.util.ArrayList} {\bf  nonCaptureMoves})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public volatile {\bf  inRunningInstance}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  mtajiCapLocation}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  mtajiNonCapLocation}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public void {\bf  nextTurn}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  opponent}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  playerType}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  seedLocation}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  seedsInStock}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  takasaLocation}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public volatile {\bf  turnDone}}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public {\bf  turnType}}%end signature
}%end item
\end{itemize}
}
}
\section{\label{bao.player.PlayerType}\index{PlayerType}Class PlayerType}{
\vskip .1in 
Enumerates the options PLAYER\_1 and PLAYER\_2 to enable cleaner, more readable control structures.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public final class PlayerType
 extends java.lang.Enum\end{lstlisting}
\subsection{Field summary}{
\begin{verse}
{\bf PLAYER\_1} \\
{\bf PLAYER\_2} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf opposite(PlayerType)} \\
{\bf valueOf(String)} \\
{\bf values()} \\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{PLAYER\_1}
\label{bao.player.PlayerType.PLAYER_1}\texttt{public static final PlayerType\ {\bf  PLAYER\_1}}
}
\item{
\index{PLAYER\_2}
\label{bao.player.PlayerType.PLAYER_2}\texttt{public static final PlayerType\ {\bf  PLAYER\_2}}
}
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{opposite(PlayerType)}
{\bf  opposite}\\
\begin{lstlisting}[frame=none]
public static PlayerType opposite(PlayerType input)\end{lstlisting} %end signature
}%end item
\item{ 
\index{valueOf(String)}
{\bf  valueOf}\\
\begin{lstlisting}[frame=none]
public static PlayerType valueOf(java.lang.String name)\end{lstlisting} %end signature
}%end item
\item{ 
\index{values()}
{\bf  values}\\
\begin{lstlisting}[frame=none]
public static PlayerType[] values()\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Enum }{
\texttt{java.lang.Enum} {\small 
\refdefined{java.lang.Enum}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{protected final Object {\bf  clone}() throws CloneNotSupportedException
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  compareTo}(\texttt{Enum} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  equals}(\texttt{Object} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  finalize}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Class {\bf  getDeclaringClass}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  hashCode}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  name}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  ordinal}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public String {\bf  toString}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static Enum {\bf  valueOf}(\texttt{Class} {\bf  arg0},
\texttt{String} {\bf  arg1})
}%end signature
}%end item
\end{itemize}
}
}
\section{\label{bao.player.TurnType}\index{TurnType}Class TurnType}{
\vskip .1in 
An enum that enumerates the two major types of turns in the game procession.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public final class TurnType
 extends java.lang.Enum\end{lstlisting}
\subsection{Field summary}{
\begin{verse}
{\bf CAPTURE} \\
{\bf TAKASA} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf valueOf(String)} \\
{\bf values()} \\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{CAPTURE}
\label{bao.player.TurnType.CAPTURE}\texttt{public static final TurnType\ {\bf  CAPTURE}}
}
\item{
\index{TAKASA}
\label{bao.player.TurnType.TAKASA}\texttt{public static final TurnType\ {\bf  TAKASA}}
}
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{valueOf(String)}
{\bf  valueOf}\\
\begin{lstlisting}[frame=none]
public static TurnType valueOf(java.lang.String name)\end{lstlisting} %end signature
}%end item
\item{ 
\index{values()}
{\bf  values}\\
\begin{lstlisting}[frame=none]
public static TurnType[] values()\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Enum }{
\texttt{java.lang.Enum} {\small 
\refdefined{java.lang.Enum}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{protected final Object {\bf  clone}() throws CloneNotSupportedException
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  compareTo}(\texttt{Enum} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  equals}(\texttt{Object} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  finalize}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Class {\bf  getDeclaringClass}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  hashCode}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  name}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  ordinal}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public String {\bf  toString}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static Enum {\bf  valueOf}(\texttt{Class} {\bf  arg0},
\texttt{String} {\bf  arg1})
}%end signature
}%end item
\end{itemize}
}
}
}
\chapter{Package bao.tree}{
\label{bao.tree}\hskip -.05in
\hbox to \hsize{\textit{ Package Contents\hfil Page}}
\vskip .13in
\hbox{{\bf  Classes}}
\entityintro{GameNode}{bao.tree.GameNode}{}
\entityintro{GameTree}{bao.tree.GameTree}{}
\entityintro{NodeType}{bao.tree.NodeType}{A helper class that encapsulates the types of game tree nodes.}
\vskip .1in
\vskip .1in
\section{\label{bao.tree.GameNode}\index{GameNode}Class GameNode}{
\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public class GameNode
 extends java.lang.Object\end{lstlisting}
\subsection{Field summary}{
\begin{verse}
{\bf board} A BaoBoard encapsulating the node's most important internal state.\\
{\bf children} An array list\\
\end{verse}
}
\subsection{Constructor summary}{
\begin{verse}
{\bf GameNode(BaoBoard, NodeType)} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf alphabeta(GameNode, int, double, double, boolean, PlayerType)} Main alpha-beta function, performs recursive search for next move.\\
{\bf getBestMoveRecursive(PlayerType, int)} The main pure MINIMAX function.\\
{\bf getValue(PlayerType)} Function that calculates the value\\
{\bf max(double, double)} Helper function to determine the greater of two doubles\\
{\bf min(double, double)} Helper function to determine the lesser of two doubles\\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{board}
\label{bao.tree.GameNode.board}\texttt{public bao.BaoBoard\ {\bf  board}}
\begin{itemize}
\item{\vskip -.9ex 
A BaoBoard encapsulating the node's most important internal state.}
\end{itemize}
}
\item{
\index{children}
\label{bao.tree.GameNode.children}\texttt{public java.util.ArrayList\ {\bf  children}}
\begin{itemize}
\item{\vskip -.9ex 
An array list}
\end{itemize}
}
\end{itemize}
}
\subsection{Constructors}{
\vskip -2em
\begin{itemize}
\item{ 
\index{GameNode(BaoBoard, NodeType)}
{\bf  GameNode}\\
\begin{lstlisting}[frame=none]
public GameNode(bao.BaoBoard board,NodeType type)\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{alphabeta(GameNode, int, double, double, boolean, PlayerType)}
{\bf  alphabeta}\\
\begin{lstlisting}[frame=none]
public double alphabeta(GameNode node,int depth,double alpha,double beta,boolean maxPlayer,bao.player.PlayerType player)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Main alpha-beta function, performs recursive search for next move.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{node} -- the first value.}
   \item{
\texttt{depth} -- the current depth of the search, decrements from max to zero before terminating.}
   \item{
\texttt{alpha} -- the maintained alpha value, as per algorithm.}
   \item{
\texttt{beta} -- the maintained beta value, as per algorithm.}
   \item{
\texttt{maxPlayer} -- boolean flag determining whether the current play is done by the MAX participle.}
   \item{
\texttt{player} -- The type of player in terms of the Bao game (ie PLAYER\_1 or PLAYER\_2).}
  \end{itemize}
}%end item
\item{{\bf  Returns} -- 
A double containing the value of a given move, with respect the the alpha beta algorithm. 
}%end item
\end{itemize}
}%end item
\item{ 
\index{getBestMoveRecursive(PlayerType, int)}
{\bf  getBestMoveRecursive}\\
\begin{lstlisting}[frame=none]
public bao.Move getBestMoveRecursive(bao.player.PlayerType playerType,int level)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

The main pure MINIMAX function. {\bf No longer used}, \texttt{ alphabeta} is now used to calculate next moves. Function has been kept for comparison purposes.
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{playerType} -- the type of player asking for the move.}
   \item{
\texttt{level} -- an integer maintaining the current depth of the recursive search.}
  \end{itemize}
}%end item
\end{itemize}
}%end item
\item{ 
\index{getValue(PlayerType)}
{\bf  getValue}\\
\begin{lstlisting}[frame=none]
public double getValue(bao.player.PlayerType player)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Function that calculates the value
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{player} -- the "perspective" we are calculating the state value for.}
  \end{itemize}
}%end item
\item{{\bf  Returns} -- 
the value of the current state of the board for a given player. 
}%end item
\end{itemize}
}%end item
\item{ 
\index{max(double, double)}
{\bf  max}\\
\begin{lstlisting}[frame=none]
public static double max(double a,double b)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Helper function to determine the greater of two doubles
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{a} -- the first value.}
   \item{
\texttt{b} -- the second value.}
  \end{itemize}
}%end item
\end{itemize}
}%end item
\item{ 
\index{min(double, double)}
{\bf  min}\\
\begin{lstlisting}[frame=none]
public static double min(double a,double b)\end{lstlisting} %end signature
\begin{itemize}
\item{
{\bf  Description}

Helper function to determine the lesser of two doubles
}
\item{
{\bf  Parameters}
  \begin{itemize}
   \item{
\texttt{a} -- the first value.}
   \item{
\texttt{b} -- the second value.}
  \end{itemize}
}%end item
\end{itemize}
}%end item
\end{itemize}
}
}
\section{\label{bao.tree.GameTree}\index{GameTree}Class GameTree}{
\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public class GameTree
 extends java.lang.Object\end{lstlisting}
\subsection{Field summary}{
\begin{verse}
{\bf DEPTH} \\
\end{verse}
}
\subsection{Constructor summary}{
\begin{verse}
{\bf GameTree(BaoBoard)} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf abprune(PlayerType)} \\
{\bf getBestMove(PlayerType)} \\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{DEPTH}
\label{bao.tree.GameTree.DEPTH}\texttt{public static int\ {\bf  DEPTH}}
}
\end{itemize}
}
\subsection{Constructors}{
\vskip -2em
\begin{itemize}
\item{ 
\index{GameTree(BaoBoard)}
{\bf  GameTree}\\
\begin{lstlisting}[frame=none]
public GameTree(bao.BaoBoard board)\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{abprune(PlayerType)}
{\bf  abprune}\\
\begin{lstlisting}[frame=none]
public bao.Move abprune(bao.player.PlayerType player)\end{lstlisting} %end signature
}%end item
\item{ 
\index{getBestMove(PlayerType)}
{\bf  getBestMove}\\
\begin{lstlisting}[frame=none]
public bao.Move getBestMove(bao.player.PlayerType playerType)\end{lstlisting} %end signature
}%end item
\end{itemize}
}
}
\section{\label{bao.tree.NodeType}\index{NodeType}Class NodeType}{
\vskip .1in 
A helper class that encapsulates the types of game tree nodes.\vskip .1in 
\subsection{Declaration}{
\begin{lstlisting}[frame=none]
public final class NodeType
 extends java.lang.Enum\end{lstlisting}
\subsection{Field summary}{
\begin{verse}
{\bf MAX} \\
{\bf MIN} \\
\end{verse}
}
\subsection{Method summary}{
\begin{verse}
{\bf opposite(NodeType)} \\
{\bf valueOf(String)} \\
{\bf values()} \\
\end{verse}
}
\subsection{Fields}{
\begin{itemize}
\item{
\index{MIN}
\label{bao.tree.NodeType.MIN}\texttt{public static final NodeType\ {\bf  MIN}}
}
\item{
\index{MAX}
\label{bao.tree.NodeType.MAX}\texttt{public static final NodeType\ {\bf  MAX}}
}
\end{itemize}
}
\subsection{Methods}{
\vskip -2em
\begin{itemize}
\item{ 
\index{opposite(NodeType)}
{\bf  opposite}\\
\begin{lstlisting}[frame=none]
public static NodeType opposite(NodeType input)\end{lstlisting} %end signature
}%end item
\item{ 
\index{valueOf(String)}
{\bf  valueOf}\\
\begin{lstlisting}[frame=none]
public static NodeType valueOf(java.lang.String name)\end{lstlisting} %end signature
}%end item
\item{ 
\index{values()}
{\bf  values}\\
\begin{lstlisting}[frame=none]
public static NodeType[] values()\end{lstlisting} %end signature
}%end item
\end{itemize}
}
\subsection{Members inherited from class Enum }{
\texttt{java.lang.Enum} {\small 
\refdefined{java.lang.Enum}}
{\small 

\vskip -2em
\begin{itemize}
\item{\vskip -1.5ex 
\texttt{protected final Object {\bf  clone}() throws CloneNotSupportedException
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  compareTo}(\texttt{Enum} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final boolean {\bf  equals}(\texttt{Object} {\bf  arg0})
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{protected final void {\bf  finalize}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final Class {\bf  getDeclaringClass}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  hashCode}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final String {\bf  name}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public final int {\bf  ordinal}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public String {\bf  toString}()
}%end signature
}%end item
\item{\vskip -1.5ex 
\texttt{public static Enum {\bf  valueOf}(\texttt{Class} {\bf  arg0},
\texttt{String} {\bf  arg1})
}%end signature
}%end item
\end{itemize}
}
}
}
\printindex
\end{document}
